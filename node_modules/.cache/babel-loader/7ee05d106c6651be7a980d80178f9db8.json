{"ast":null,"code":"import _defineProperty from \"C:\\\\Users\\\\user\\\\OSPanel\\\\domains\\\\moscow\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { userAPI } from \"../API/api\";\nconst UPDATE_TEXT_LOGIN = 'UPDATE_TEXT_LOGIN';\nconst UPDATE_TEXT_PASSWORD = 'UPDATE_TEXT_PASSWORD';\nlet initialState = {\n  idUser: '',\n  email: '',\n  password: '',\n  isAuth: false,\n  token: ''\n};\n\nconst AuthReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case UPDATE_TEXT_LOGIN:\n      return _objectSpread({}, state, {\n        email: action.passwordEmail\n      });\n\n    case UPDATE_TEXT_PASSWORD:\n      return _objectSpread({}, state, {\n        password: action.emailBody\n      });\n\n    default:\n      return state;\n  }\n};\n\nexport const updateEmail = email => ({\n  type: UPDATE_TEXT_LOGIN,\n  emailBody: email\n});\nexport const updatePassword = password => ({\n  type: UPDATE_TEXT_LOGIN,\n  passwordBody: password\n});\nexport const authMe = () => {\n  return dispatch => {\n    userAPI.getMe().then(response => {\n      if (response.resultCode === 0) {\n        let _response$data = response.data,\n            id = _response$data.id,\n            email = _response$data.email,\n            login = _response$data.login;\n        dispatch(setUserData(id, email, login));\n      }\n    });\n  };\n};\nexport default AuthReducer;","map":{"version":3,"sources":["C:/Users/user/OSPanel/domains/moscow/src/redux/authReducer.js"],"names":["userAPI","UPDATE_TEXT_LOGIN","UPDATE_TEXT_PASSWORD","initialState","idUser","email","password","isAuth","token","AuthReducer","state","action","type","passwordEmail","emailBody","updateEmail","updatePassword","passwordBody","authMe","dispatch","getMe","then","response","resultCode","data","id","login","setUserData"],"mappings":";;;;;;AAAA,SAASA,OAAT,QAAuB,YAAvB;AAEA,MAAMC,iBAAiB,GAAG,mBAA1B;AACA,MAAMC,oBAAoB,GAAG,sBAA7B;AAEA,IAAIC,YAAY,GAAG;AACfC,EAAAA,MAAM,EAAE,EADO;AAEfC,EAAAA,KAAK,EAAE,EAFQ;AAGfC,EAAAA,QAAQ,EAAE,EAHK;AAIfC,EAAAA,MAAM,EAAE,KAJO;AAKfC,EAAAA,KAAK,EAAC;AALS,CAAnB;;AAOA,MAAMC,WAAW,GAAG,CAACC,KAAK,GAAGP,YAAT,EAAuBQ,MAAvB,KAAkC;AAClD,UAAQA,MAAM,CAACC,IAAf;AACI,SAAKX,iBAAL;AACI,+BACOS,KADP;AAEIL,QAAAA,KAAK,EAACM,MAAM,CAACE;AAFjB;;AAIJ,SAAKX,oBAAL;AACI,+BACOQ,KADP;AAEIJ,QAAAA,QAAQ,EAACK,MAAM,CAACG;AAFpB;;AAIJ;AACI,aAAOJ,KAAP;AAZR;AAcH,CAfD;;AAgBA,OAAO,MAAMK,WAAW,GAAIV,KAAD,KAAY;AAACO,EAAAA,IAAI,EAAEX,iBAAP;AAA0Ba,EAAAA,SAAS,EAACT;AAApC,CAAZ,CAApB;AACP,OAAO,MAAMW,cAAc,GAAIV,QAAD,KAAe;AAACM,EAAAA,IAAI,EAAEX,iBAAP;AAA0BgB,EAAAA,YAAY,EAACX;AAAvC,CAAf,CAAvB;AACP,OAAO,MAAMY,MAAM,GAAC,MAAI;AACpB,SAAQC,QAAD,IAAY;AACfnB,IAAAA,OAAO,CAACoB,KAAR,GAAgBC,IAAhB,CAAqBC,QAAQ,IAAI;AAC1B,UAAIA,QAAQ,CAACC,UAAT,KAAwB,CAA5B,EAA+B;AAAA,6BACPD,QAAQ,CAACE,IADF;AAAA,YACzBC,EADyB,kBACzBA,EADyB;AAAA,YACrBpB,KADqB,kBACrBA,KADqB;AAAA,YACdqB,KADc,kBACdA,KADc;AAE9BP,QAAAA,QAAQ,CAACQ,WAAW,CAACF,EAAD,EAAKpB,KAAL,EAAYqB,KAAZ,CAAZ,CAAR;AACH;AACJ,KALD;AAMH,GAPD;AAQH,CATM;AAUP,eAAejB,WAAf","sourcesContent":["import { userAPI} from \"../API/api\";\r\n\r\nconst UPDATE_TEXT_LOGIN = 'UPDATE_TEXT_LOGIN';\r\nconst UPDATE_TEXT_PASSWORD = 'UPDATE_TEXT_PASSWORD';\r\n\r\nlet initialState = {\r\n    idUser: '',\r\n    email: '',\r\n    password: '',\r\n    isAuth: false,\r\n    token:''\r\n}\r\nconst AuthReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case UPDATE_TEXT_LOGIN:\r\n            return {\r\n                ...state,\r\n                email:action.passwordEmail\r\n            };\r\n        case UPDATE_TEXT_PASSWORD:\r\n            return {\r\n                ...state,\r\n                password:action.emailBody\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n};\r\nexport const updateEmail = (email) => ({type: UPDATE_TEXT_LOGIN, emailBody:email});\r\nexport const updatePassword = (password) => ({type: UPDATE_TEXT_LOGIN, passwordBody:password});\r\nexport const authMe=()=>{\r\n    return (dispatch)=>{\r\n        userAPI.getMe().then(response => {\r\n               if (response.resultCode === 0) {\r\n                let {id, email, login}=response.data;\r\n                dispatch(setUserData(id, email, login));\r\n            }\r\n        });\r\n    }\r\n};\r\nexport default AuthReducer;"]},"metadata":{},"sourceType":"module"}