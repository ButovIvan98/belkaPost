{"ast":null,"code":"import _defineProperty from \"C:\\\\Users\\\\user\\\\OSPanel\\\\domains\\\\moscow\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { RegistrationAPI } from \"../API/api\";\nconst INPUT_TEXT_SURNAME = 'INPUT_TEXT_SURNAME'; //Фамилия\n\nconst INPUT_TEXT_NAME = 'INPUT_TEXT_NAME'; //Имя\n\nconst INPUT_TEXT_MIDDLE_NAME = 'INPUT_TEXT_MIDDLE_NAME'; //Отчество\n\nconst INPUT_TEXT_PHONE = 'INPUT_TEXT_PHONE'; //Телефон\n\nconst INPUT_TEXT_EMAIL = 'INPUT_TEXT_EMAIL'; //Емаил\n\nconst INPUT_TEXT_PASSWORD = 'INPUT_TEXT_PASSWORD'; //Пароль\n\nconst VALID_SURNAME = 'VALID_SURNAME';\nconst VALID_NAME = 'VALID_NAME';\nconst VALID_MIDDLE_NAME = 'VALID_MIDDLE_NAME';\nconst VALID_PHONE = 'VALID_PHONE';\nconst VALID_EMAIL = 'VALID_EMAIL';\nconst VALID_PASSWORD = 'VALID_PASSWORD';\nconst ADD_USER = 'ADD_USER';\nconst initialState = {\n  surname: '1',\n  validSurname: false,\n  name: '2',\n  validName: false,\n  middleName: '3',\n  validMiddleName: false,\n  phone: '',\n  validPhone: false,\n  email: '5',\n  validEmail: false,\n  password: '6',\n  validPassword: false\n};\n\nconst RegistrationReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case INPUT_TEXT_SURNAME:\n      return _objectSpread({}, state, {\n        surname: action.bodySurname\n      });\n\n    case INPUT_TEXT_NAME:\n      return _objectSpread({}, state, {\n        name: action.bodyName\n      });\n\n    case INPUT_TEXT_MIDDLE_NAME:\n      return _objectSpread({}, state, {\n        middleName: action.bodyMiddleName\n      });\n\n    case INPUT_TEXT_PHONE:\n      return _objectSpread({}, state, {\n        phone: action.bodyPhone\n      });\n\n    case INPUT_TEXT_EMAIL:\n      return _objectSpread({}, state, {\n        email: action.bodyEmail\n      });\n\n    case INPUT_TEXT_PASSWORD:\n      return _objectSpread({}, state, {\n        password: action.bodyPassword\n      });\n\n    case VALID_SURNAME:\n      debugger;\n      return _objectSpread({}, state, {\n        validSurname: action.surnameBoolean\n      });\n\n    case VALID_PASSWORD:\n      return _objectSpread({}, state, {\n        validPassword: true\n      });\n\n    case VALID_EMAIL:\n      return _objectSpread({}, state, {\n        validEmail: action.emailBoolean\n      });\n\n    case VALID_NAME:\n      return _objectSpread({}, state, {\n        validName: action.nameBoolean\n      });\n\n    case VALID_NAME:\n      return _objectSpread({}, state, {\n        validName: action.nameBoolean\n      });\n\n    case VALID_NAME:\n      return _objectSpread({}, state, {\n        validName: action.nameBoolean\n      });\n\n    case VALID_NAME:\n      return _objectSpread({}, state, {\n        validName: action.nameBoolean\n      });\n\n    default:\n      return _objectSpread({}, state);\n  }\n};\n\nexport const updateTextSurname = surname => ({\n  type: INPUT_TEXT_SURNAME,\n  bodySurname: surname\n});\nexport const updateTextName = name => ({\n  type: INPUT_TEXT_NAME,\n  bodyName: name\n});\nexport const updateTextMiddleName = middleName => ({\n  type: INPUT_TEXT_MIDDLE_NAME,\n  bodyMiddleName: middleName\n});\nexport const updateTextPhone = phone => ({\n  type: INPUT_TEXT_PHONE,\n  bodyPhone: phone\n});\nexport const updateTextEmail = email => ({\n  type: INPUT_TEXT_EMAIL,\n  bodyEmail: email\n});\nexport const updateTextPassword = password => ({\n  type: INPUT_TEXT_PASSWORD,\n  bodyPassword: password\n});\nexport const checkValidSurname = boolean => ({\n  type: VALID_SURNAME,\n  surnameBoolean: boolean\n});\n\nconst checkValidName = boolean => ({\n  type: VALID_NAME,\n  nameBoolean: boolean\n});\n\nconst checkValidMiddleName = boolean => ({\n  type: VALID_MIDDLE_NAME,\n  middleNameBoolean: boolean\n});\n\nconst checkValidPhone = boolean => ({\n  type: VALID_PHONE,\n  phoneBoolean: boolean\n});\n\nconst checkValidEmail = boolean => ({\n  type: VALID_EMAIL,\n  emailBoolean: boolean\n});\n\nconst checkValidPassword = boolean => ({\n  type: VALID_PASSWORD,\n  passwordBoolean: boolean\n});\n\nexport const addUser = body => {\n  return () => {//RegistrationAPI.putRegistration(initialState.surname, initialState.name, initialState.middleName, initialState.phone, initialState.email, initialState.password)\n    // else {\n    //     //придумать сообщение об ошибке\n    // }\n  };\n};\nexport const validSurname = surname => {\n  return dispatch => {\n    dispatch(updateTextSurname(surname));\n\n    if (surname.length < 2) {\n      dispatch(checkValidSurname(false)); //Сообщение об ошибке\n    } else {\n      dispatch(checkValidSurname(true));\n    }\n  };\n};\nexport const validName = name => {\n  return dispatch => {\n    if (name.length < 2) {\n      dispatch(checkValidName(false)); //Сообщение об ошибке\n    } else {\n      dispatch(checkValidName(true));\n    }\n  };\n};\nexport const validMiddleName = middleName => {\n  return dispatch => {\n    if (middleName.length < 2) {\n      dispatch(checkValidMiddleName(false)); //Сообщение об ошибке\n    } else {\n      dispatch(checkValidMiddleName(true));\n    }\n  };\n};\nexport const validPhone = phone => {\n  return dispatch => {\n    if (phone.length < 2) {\n      dispatch(checkValidPhone(false));\n    } else {\n      dispatch(checkValidPhone(true));\n    }\n  };\n};\nexport const validEmail = email => {\n  return dispatch => {\n    if (!/.+@.+\\.[A-Za-z]+$/.test(email)) {\n      dispatch(checkValidEmail(false));\n    } else {\n      dispatch(checkValidEmail(true));\n    }\n  };\n};\nexport const validPassword = password => {\n  return dispatch => {\n    if (password.length < 6) {//Придумать как будет возвращать сообщение об ошибке\n    } else if (!/[a-zA-Z]/.test(password)) {//\n    } else {\n      dispatch(checkValidPassword());\n    }\n  };\n};\nexport default RegistrationReducer;","map":{"version":3,"sources":["C:/Users/user/OSPanel/domains/moscow/src/redux/registrationReducer.js"],"names":["RegistrationAPI","INPUT_TEXT_SURNAME","INPUT_TEXT_NAME","INPUT_TEXT_MIDDLE_NAME","INPUT_TEXT_PHONE","INPUT_TEXT_EMAIL","INPUT_TEXT_PASSWORD","VALID_SURNAME","VALID_NAME","VALID_MIDDLE_NAME","VALID_PHONE","VALID_EMAIL","VALID_PASSWORD","ADD_USER","initialState","surname","validSurname","name","validName","middleName","validMiddleName","phone","validPhone","email","validEmail","password","validPassword","RegistrationReducer","state","action","type","bodySurname","bodyName","bodyMiddleName","bodyPhone","bodyEmail","bodyPassword","surnameBoolean","emailBoolean","nameBoolean","updateTextSurname","updateTextName","updateTextMiddleName","updateTextPhone","updateTextEmail","updateTextPassword","checkValidSurname","boolean","checkValidName","checkValidMiddleName","middleNameBoolean","checkValidPhone","phoneBoolean","checkValidEmail","checkValidPassword","passwordBoolean","addUser","body","dispatch","length","test"],"mappings":"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","sourcesContent":["import {RegistrationAPI} from \"../API/api\";\r\n\r\nconst INPUT_TEXT_SURNAME = 'INPUT_TEXT_SURNAME';//Фамилия\r\nconst INPUT_TEXT_NAME = 'INPUT_TEXT_NAME';//Имя\r\nconst INPUT_TEXT_MIDDLE_NAME = 'INPUT_TEXT_MIDDLE_NAME';//Отчество\r\nconst INPUT_TEXT_PHONE = 'INPUT_TEXT_PHONE';//Телефон\r\nconst INPUT_TEXT_EMAIL = 'INPUT_TEXT_EMAIL';//Емаил\r\nconst INPUT_TEXT_PASSWORD = 'INPUT_TEXT_PASSWORD';//Пароль\r\n\r\nconst VALID_SURNAME = 'VALID_SURNAME';\r\nconst VALID_NAME = 'VALID_NAME';\r\nconst VALID_MIDDLE_NAME = 'VALID_MIDDLE_NAME';\r\nconst VALID_PHONE = 'VALID_PHONE';\r\nconst VALID_EMAIL = 'VALID_EMAIL';\r\nconst VALID_PASSWORD = 'VALID_PASSWORD';\r\n\r\nconst ADD_USER = 'ADD_USER';\r\n\r\nconst initialState = {\r\n    surname: '1',\r\n    validSurname: false,\r\n    name: '2',\r\n    validName: false,\r\n    middleName: '3',\r\n    validMiddleName: false,\r\n    phone: '',\r\n    validPhone: false,\r\n    email: '5',\r\n    validEmail: false,\r\n    password: '6',\r\n    validPassword: false\r\n};\r\n\r\nconst RegistrationReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case INPUT_TEXT_SURNAME:\r\n            return {\r\n                ...state,\r\n                surname: action.bodySurname\r\n            };\r\n        case INPUT_TEXT_NAME:\r\n            return {\r\n                ...state,\r\n                name: action.bodyName\r\n            };\r\n        case INPUT_TEXT_MIDDLE_NAME:\r\n\r\n            return {\r\n                ...state,\r\n                middleName: action.bodyMiddleName\r\n            };\r\n        case INPUT_TEXT_PHONE:\r\n            return {\r\n                ...state,\r\n                phone: action.bodyPhone\r\n            };\r\n        case INPUT_TEXT_EMAIL:\r\n            return {\r\n                ...state,\r\n                email: action.bodyEmail\r\n            };\r\n        case INPUT_TEXT_PASSWORD:\r\n            return {\r\n                ...state,\r\n                password: action.bodyPassword\r\n            };\r\n        case VALID_SURNAME:\r\n            debugger\r\n            return {\r\n                ...state,\r\n                validSurname: action.surnameBoolean\r\n            };\r\n        case VALID_PASSWORD:\r\n            return {\r\n                ...state,\r\n                validPassword: true\r\n            };\r\n        case VALID_EMAIL:\r\n            return {\r\n                ...state,\r\n                validEmail:action.emailBoolean\r\n            };\r\n        case VALID_NAME:\r\n            return {\r\n                ...state,\r\n                validName:action.nameBoolean\r\n            };\r\n        case VALID_NAME:\r\n            return {\r\n                ...state,\r\n                validName:action.nameBoolean\r\n            };\r\n        case VALID_NAME:\r\n            return {\r\n                ...state,\r\n                validName:action.nameBoolean\r\n            };\r\n        case VALID_NAME:\r\n            return {\r\n                ...state,\r\n                validName:action.nameBoolean\r\n            };\r\n        default:\r\n            return {...state}\r\n    }\r\n};\r\nexport const updateTextSurname = (surname) => ({type: INPUT_TEXT_SURNAME, bodySurname: surname});\r\nexport const updateTextName = (name) => ({type: INPUT_TEXT_NAME, bodyName: name});\r\nexport const updateTextMiddleName = (middleName) => ({type: INPUT_TEXT_MIDDLE_NAME, bodyMiddleName: middleName});\r\nexport const updateTextPhone = (phone) => ({type: INPUT_TEXT_PHONE, bodyPhone: phone});\r\nexport const updateTextEmail = (email) => ({type: INPUT_TEXT_EMAIL, bodyEmail: email});\r\nexport const updateTextPassword = (password) => ({type: INPUT_TEXT_PASSWORD, bodyPassword: password});\r\n\r\nexport const checkValidSurname = (boolean) => ({type: VALID_SURNAME, surnameBoolean:boolean});\r\nconst checkValidName = (boolean) => ({type: VALID_NAME, nameBoolean:boolean});\r\nconst checkValidMiddleName = (boolean) => ({type: VALID_MIDDLE_NAME, middleNameBoolean:boolean});\r\nconst checkValidPhone = (boolean) => ({type: VALID_PHONE, phoneBoolean:boolean});\r\nconst checkValidEmail = (boolean) => ({type: VALID_EMAIL, emailBoolean:boolean});\r\nconst checkValidPassword = (boolean) => ({type: VALID_PASSWORD, passwordBoolean:boolean});\r\n\r\nexport const addUser = (body) => {\r\n    return () => {\r\n        //RegistrationAPI.putRegistration(initialState.surname, initialState.name, initialState.middleName, initialState.phone, initialState.email, initialState.password)\r\n        // else {\r\n        //     //придумать сообщение об ошибке\r\n        // }\r\n    }\r\n};\r\nexport const validSurname = (surname) => {\r\n    return (dispatch) => {\r\n         dispatch(updateTextSurname(surname));\r\n        if (surname.length < 2) {\r\n            dispatch(checkValidSurname(false));\r\n            //Сообщение об ошибке\r\n        }\r\n        else {\r\n            dispatch(checkValidSurname(true));\r\n        }\r\n    }\r\n};\r\nexport const validName = (name) => {\r\n    return (dispatch) => {\r\n        if (name.length < 2) {\r\n            dispatch(checkValidName(false));\r\n            //Сообщение об ошибке\r\n        }\r\n        else {\r\n            dispatch(checkValidName(true));\r\n        }\r\n    }\r\n};\r\nexport const validMiddleName = (middleName) => {\r\n    return (dispatch) => {\r\n        if (middleName.length < 2) {\r\n            dispatch(checkValidMiddleName(false));\r\n            //Сообщение об ошибке\r\n        }\r\n        else {\r\n            dispatch(checkValidMiddleName(true));\r\n        }\r\n    }\r\n};\r\nexport const validPhone = (phone) => {\r\n    return (dispatch) => {\r\n        if (phone.length < 2) {\r\n            dispatch(checkValidPhone(false));\r\n        }\r\n        else {\r\n            dispatch(checkValidPhone(true));\r\n        }\r\n    }\r\n};\r\nexport const validEmail = (email) => {\r\n    return (dispatch) => {\r\n    if(!/.+@.+\\.[A-Za-z]+$/.test(email)){\r\n        dispatch(checkValidEmail(false));\r\n    }\r\n    else\r\n    {\r\n        dispatch(checkValidEmail(true));\r\n    }\r\n\r\n    }\r\n};\r\nexport const validPassword = (password) => {\r\n    return (dispatch) => {\r\n        if (password.length < 6) {\r\n            //Придумать как будет возвращать сообщение об ошибке\r\n        }\r\n        else if (!/[a-zA-Z]/.test(password)) {\r\n            //\r\n        }\r\n        else {\r\n            dispatch(checkValidPassword());\r\n        }\r\n    }\r\n};\r\nexport default RegistrationReducer;\r\n\r\n"]},"metadata":{},"sourceType":"module"}