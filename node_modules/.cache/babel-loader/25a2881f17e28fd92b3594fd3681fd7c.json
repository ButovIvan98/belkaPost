{"ast":null,"code":"import _defineProperty from \"C:\\\\Users\\\\user\\\\OSPanel\\\\domains\\\\my-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { RegistrationAPI } from \"../API/api\";\nconst INPUT_TEXT_SURNAME = 'INPUT_TEXT_SURNAME'; //Фамилия\n\nconst INPUT_TEXT_NAME = 'INPUT_TEXT_NAME'; //Имя\n\nconst INPUT_TEXT_MIDDLE_NAME = 'INPUT_TEXT_MIDDLE_NAME'; //Отчество\n\nconst INPUT_TEXT_PHONE = 'INPUT_TEXT_PHONE'; //Телефон\n\nconst INPUT_TEXT_EMAIL = 'INPUT_TEXT_EMAIL'; //Емаил\n\nconst INPUT_TEXT_PASSWORD = 'INPUT_TEXT_PASSWORD'; //Пароль\n\nconst VALID_SURNAME = 'VALID_SURNAME';\nconst VALID_NAME = 'VALID_NAME';\nconst VALID_MIDDLE_NAME = 'VALID_MIDDLE_NAME';\nconst VALID_PHONE = 'VALID_PHONE';\nconst VALID_EMAIL = 'VALID_EMAIL';\nconst VALID_PASSWORD = 'VALID_PASSWORD';\nconst initialState = {\n  surname: '1',\n  validSurname: false,\n  name: '2',\n  validName: false,\n  middleName: '3',\n  validMiddleName: false,\n  phone: '',\n  validPhone: false,\n  email: '5',\n  validEmail: false,\n  password: '6',\n  validPassword: false\n};\n\nconst RegistrationReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case INPUT_TEXT_SURNAME:\n      return _objectSpread({}, state, {\n        surname: action.bodySurname\n      });\n\n    case INPUT_TEXT_NAME:\n      return _objectSpread({}, state, {\n        name: action.bodyName\n      });\n\n    case INPUT_TEXT_MIDDLE_NAME:\n      return _objectSpread({}, state, {\n        middleName: action.bodyMiddleName\n      });\n\n    case INPUT_TEXT_PHONE:\n      return _objectSpread({}, state, {\n        phone: action.bodyPhone\n      });\n\n    case INPUT_TEXT_EMAIL:\n      return _objectSpread({}, state, {\n        email: action.bodyEmail\n      });\n\n    case INPUT_TEXT_PASSWORD:\n      return _objectSpread({}, state, {\n        password: action.bodyPassword\n      });\n\n    case VALID_SURNAME:\n      return _objectSpread({}, state, {\n        validSurname: true\n      });\n\n    case VALID_PASSWORD:\n      return _objectSpread({}, state, {\n        validPassword: true\n      });\n\n    default:\n      return _objectSpread({}, state);\n  }\n};\n\nexport const updateTextSurname = surname => ({\n  type: INPUT_TEXT_SURNAME,\n  bodySurname: surname\n});\nexport const checkSurname = () => ({\n  type: VALID_PASSWORD\n});\nexport const updateTextName = name => ({\n  type: INPUT_TEXT_NAME,\n  bodyName: name\n});\nexport const updateTextMiddleName = middleName => ({\n  type: INPUT_TEXT_MIDDLE_NAME,\n  bodyMiddleName: middleName\n});\nexport const updateTextPhone = phone => ({\n  type: INPUT_TEXT_PHONE,\n  bodyPhone: phone\n});\nexport const updateTextEmail = email => ({\n  type: INPUT_TEXT_EMAIL,\n  bodyEmail: email\n});\nexport const updateTextPassword = password => ({\n  type: INPUT_TEXT_PASSWORD,\n  bodyPassword: password\n});\nexport const checkValidSurname = () => ({\n  type: VALID_SURNAME\n});\n\nconst checkValidName = () => ({\n  type: VALID_NAME\n});\n\nconst checkValidMiddleName = () => ({\n  type: VALID_MIDDLE_NAME\n});\n\nconst checkValidPhone = () => ({\n  type: VALID_PHONE\n});\n\nconst checkValidEmail = () => ({\n  type: VALID_EMAIL\n});\n\nconst checkValidPassword = () => ({\n  type: VALID_PASSWORD\n});\n\nexport const addUser = body => {\n  return () => {//RegistrationAPI.putRegistration(initialState.surname, initialState.name, initialState.middleName, initialState.phone, initialState.email, initialState.password)\n    // else {\n    //     //придумать сообщение об ошибке\n    // }\n  };\n};\nexport const validSurname = surname => {\n  return dispatch => {\n    dispatch(updateTextSurname(surname));\n\n    if (surname.length < 6) {//Сообщение об ошибке\n    } else {\n      dispatch(checkValidSurname);\n    }\n  };\n};\nexport const validName = name => {\n  let lenghtName = name.length;\n  return () => {};\n};\nexport const validMiddleName = middleName => {\n  debugger;\n  let lenghtMiddleName = middleName.length;\n  return () => {};\n};\nexport const validPhone = phone => {\n  debugger;\n  let lenghtSurname = phone.length;\n  return () => {};\n};\nexport const validEmail = email => {\n  debugger;\n  let linghtEmail = email.length;\n  return () => {};\n};\nexport const validPassword = (password, state = initialState) => {\n  return dispatch => {\n    if (password.length < 6) {//Придумать как будет возвращать сообщение об ошибке\n    } else if (!/[a-zA-Z]/.test(password)) {} else {\n      dispatch(checkSurname);\n    }\n  };\n};\nexport default RegistrationReducer;","map":{"version":3,"sources":["C:/Users/user/OSPanel/domains/my-app/src/redux/registrationReducer.js"],"names":["RegistrationAPI","INPUT_TEXT_SURNAME","INPUT_TEXT_NAME","INPUT_TEXT_MIDDLE_NAME","INPUT_TEXT_PHONE","INPUT_TEXT_EMAIL","INPUT_TEXT_PASSWORD","VALID_SURNAME","VALID_NAME","VALID_MIDDLE_NAME","VALID_PHONE","VALID_EMAIL","VALID_PASSWORD","initialState","surname","validSurname","name","validName","middleName","validMiddleName","phone","validPhone","email","validEmail","password","validPassword","RegistrationReducer","state","action","type","bodySurname","bodyName","bodyMiddleName","bodyPhone","bodyEmail","bodyPassword","updateTextSurname","checkSurname","updateTextName","updateTextMiddleName","updateTextPhone","updateTextEmail","updateTextPassword","checkValidSurname","checkValidName","checkValidMiddleName","checkValidPhone","checkValidEmail","checkValidPassword","addUser","body","dispatch","length","lenghtName","lenghtMiddleName","lenghtSurname","linghtEmail","test"],"mappings":"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","sourcesContent":["import {RegistrationAPI} from \"../API/api\";\r\n\r\nconst INPUT_TEXT_SURNAME = 'INPUT_TEXT_SURNAME';//Фамилия\r\nconst INPUT_TEXT_NAME = 'INPUT_TEXT_NAME';//Имя\r\nconst INPUT_TEXT_MIDDLE_NAME = 'INPUT_TEXT_MIDDLE_NAME';//Отчество\r\nconst INPUT_TEXT_PHONE = 'INPUT_TEXT_PHONE';//Телефон\r\nconst INPUT_TEXT_EMAIL = 'INPUT_TEXT_EMAIL';//Емаил\r\nconst INPUT_TEXT_PASSWORD = 'INPUT_TEXT_PASSWORD';//Пароль\r\n\r\nconst VALID_SURNAME = 'VALID_SURNAME';\r\nconst VALID_NAME = 'VALID_NAME';\r\nconst VALID_MIDDLE_NAME = 'VALID_MIDDLE_NAME';\r\nconst VALID_PHONE = 'VALID_PHONE';\r\nconst VALID_EMAIL = 'VALID_EMAIL';\r\nconst VALID_PASSWORD = 'VALID_PASSWORD';\r\n\r\nconst initialState = {\r\n    surname: '1',\r\n    validSurname: false,\r\n    name: '2',\r\n    validName: false,\r\n    middleName: '3',\r\n    validMiddleName: false,\r\n    phone: '',\r\n    validPhone: false,\r\n    email: '5',\r\n    validEmail: false,\r\n    password: '6',\r\n    validPassword: false\r\n};\r\n\r\nconst RegistrationReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case INPUT_TEXT_SURNAME:\r\n            return {\r\n                ...state,\r\n                surname: action.bodySurname\r\n            };\r\n        case INPUT_TEXT_NAME:\r\n            return {\r\n                ...state,\r\n                name: action.bodyName\r\n            };\r\n        case INPUT_TEXT_MIDDLE_NAME:\r\n\r\n            return {\r\n                ...state,\r\n                middleName: action.bodyMiddleName\r\n            };\r\n        case INPUT_TEXT_PHONE:\r\n            return {\r\n                ...state,\r\n                phone: action.bodyPhone\r\n            };\r\n        case INPUT_TEXT_EMAIL:\r\n            return {\r\n                ...state,\r\n                email: action.bodyEmail\r\n            };\r\n        case INPUT_TEXT_PASSWORD:\r\n            return {\r\n                ...state,\r\n                password: action.bodyPassword\r\n            };\r\n        case VALID_SURNAME:\r\n            return {\r\n                ...state,\r\n                validSurname: true\r\n            };\r\n\r\n        case VALID_PASSWORD:\r\n            return {\r\n                ...state,\r\n                validPassword: true\r\n            };\r\n        default:\r\n            return {...state}\r\n    }\r\n};\r\nexport const updateTextSurname = (surname) => ({type: INPUT_TEXT_SURNAME, bodySurname: surname});\r\nexport const checkSurname = () => ({type: VALID_PASSWORD});\r\nexport const updateTextName = (name) => ({type: INPUT_TEXT_NAME, bodyName: name});\r\nexport const updateTextMiddleName = (middleName) => ({type: INPUT_TEXT_MIDDLE_NAME, bodyMiddleName: middleName});\r\nexport const updateTextPhone = (phone) => ({type: INPUT_TEXT_PHONE, bodyPhone: phone});\r\nexport const updateTextEmail = (email) => ({type: INPUT_TEXT_EMAIL, bodyEmail: email});\r\nexport const updateTextPassword = (password) => ({type: INPUT_TEXT_PASSWORD, bodyPassword: password});\r\n\r\nexport const checkValidSurname = () => ({type: VALID_SURNAME});\r\nconst checkValidName = () => ({type: VALID_NAME});\r\nconst checkValidMiddleName = () => ({type: VALID_MIDDLE_NAME});\r\nconst checkValidPhone = () => ({type: VALID_PHONE});\r\nconst checkValidEmail = () => ({type: VALID_EMAIL});\r\nconst checkValidPassword = () => ({type: VALID_PASSWORD});\r\n\r\nexport const addUser = (body) => {\r\n    return () => {\r\n\r\n        //RegistrationAPI.putRegistration(initialState.surname, initialState.name, initialState.middleName, initialState.phone, initialState.email, initialState.password)\r\n        // else {\r\n        //     //придумать сообщение об ошибке\r\n        // }\r\n    }\r\n};\r\nexport const validSurname = (surname) => {\r\n    return (dispatch) => {\r\n        dispatch(updateTextSurname(surname));\r\n        if (surname.length < 6) {\r\n            //Сообщение об ошибке\r\n        } else {\r\n            dispatch(checkValidSurname);\r\n        }\r\n    }\r\n};\r\nexport const validName = (name) => {\r\n    let lenghtName = name.length;\r\n    return () => {\r\n\r\n    }\r\n};\r\nexport const validMiddleName = (middleName) => {\r\n    debugger\r\n    let lenghtMiddleName = middleName.length;\r\n    return () => {\r\n\r\n    }\r\n};\r\nexport const validPhone = (phone) => {\r\n    debugger\r\n    let lenghtSurname = phone.length;\r\n    return () => {\r\n\r\n    }\r\n};\r\nexport const validEmail = (email) => {\r\n    debugger\r\n    let linghtEmail = email.length;\r\n    return () => {\r\n\r\n    }\r\n};\r\nexport const validPassword = (password, state = initialState) => {\r\n    return (dispatch) => {\r\n        if (password.length < 6) {\r\n            //Придумать как будет возвращать сообщение об ошибке\r\n        }\r\n        else if (!/[a-zA-Z]/.test(password)) {\r\n\r\n        }\r\n        else {\r\n\r\n            dispatch(checkSurname);\r\n        }\r\n    }\r\n};\r\n\r\n\r\nexport default RegistrationReducer;\r\n\r\n"]},"metadata":{},"sourceType":"module"}