{"ast":null,"code":"import _defineProperty from \"C:\\\\Users\\\\user\\\\OSPanel\\\\domains\\\\moscow\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { RegistrationAPI, userAPI } from \"../API/api\";\nimport Cookies from 'js-cookie';\nconst UPDATE_TEXT_LOGIN = 'UPDATE_TEXT_LOGIN';\nconst UPDATE_TEXT_PASSWORD = 'UPDATE_TEXT_PASSWORD';\nconst AUTH = 'AUTH';\nconst VALID_PASSWORD = 'VALID_PASSWORD';\nconst VALID_EMAIL = 'VALID_EMAIL';\nlet initialState = {\n  idUser: '',\n  email: '',\n  password: '122',\n  isAuth: false,\n  token: '',\n  validEmail: false,\n  colorEmail: '1px solid #c0e4f9'\n};\n\nconst AuthorezetionReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case UPDATE_TEXT_LOGIN:\n      return _objectSpread({}, state, {\n        email: action.emailBody\n      });\n\n    case UPDATE_TEXT_PASSWORD:\n      return _objectSpread({}, state, {\n        password: action.passwordBody\n      });\n\n    case VALID_EMAIL:\n      return _objectSpread({}, state, {\n        validEmail: action.emailValid,\n        colorEmail: action.emailColor\n      });\n\n    case VALID_PASSWORD:\n      return _objectSpread({}, state, {\n        validPassword: action.passwordValid,\n        colorPassword: action.passwordColor\n      });\n\n    case AUTH:\n      return _objectSpread({}, state, {\n        isAuth: action.authBody\n      });\n\n    default:\n      return state;\n  }\n};\n\nexport const updateEmail = email => ({\n  type: UPDATE_TEXT_LOGIN,\n  emailBody: email\n});\nexport const updatePassword = password => ({\n  type: UPDATE_TEXT_PASSWORD,\n  passwordBody: password\n});\n\nconst checkValidPassword = (password, color) => ({\n  type: VALID_PASSWORD,\n  passwordValid: password,\n  passwordColor: color\n});\n\nconst checkValidEmail = (email, color) => ({\n  type: VALID_EMAIL,\n  emailValid: email,\n  emailColor: color\n});\n\nexport const authIs = auth => ({\n  type: AUTH,\n  authBody: auth\n});\nexport const validEmail = email => {\n  return dispatch => {\n    if (!/.+@.+\\.[A-Za-z]+$/.test(email)) {\n      dispatch(checkValidEmail(false, '1px solid red'));\n    } else {\n      dispatch(checkValidEmail(true, '1px solid #c0e4f9'));\n    }\n  };\n};\nexport const validPassword = password => {\n  return dispatch => {\n    if (!/[a-zA-Z0-9]/.test(password) || password.length < 6) {\n      dispatch(checkValidPassword(false, '1px solid red'));\n    } else {\n      dispatch(checkValidPassword(true, '1px solid #c0e4f9'));\n    }\n  };\n};\nexport const auth = (email, password) => {\n  return dispatch => {\n    RegistrationAPI.putAthorization(email, password).then(response => {\n      if (response.data.success) {\n        Cookies.set('authToken', response.data.data.authToken, {\n          expires: 365\n        });\n        dispatch(authIs(true)); //browserHistory.push({pathname: '/pathname', state: {message: \"hello, im a passed message!\"}});\n      } else {\n        dispatch(authIs(false));\n        console.log('Cookies не добавлены');\n      }\n    });\n  };\n};\nexport default AuthorezetionReducer;","map":{"version":3,"sources":["C:/Users/user/OSPanel/domains/moscow/src/redux/authReducer.js"],"names":["RegistrationAPI","userAPI","Cookies","UPDATE_TEXT_LOGIN","UPDATE_TEXT_PASSWORD","AUTH","VALID_PASSWORD","VALID_EMAIL","initialState","idUser","email","password","isAuth","token","validEmail","colorEmail","AuthorezetionReducer","state","action","type","emailBody","passwordBody","emailValid","emailColor","validPassword","passwordValid","colorPassword","passwordColor","authBody","updateEmail","updatePassword","checkValidPassword","color","checkValidEmail","authIs","auth","dispatch","test","length","putAthorization","then","response","data","success","set","authToken","expires","console","log"],"mappings":"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","sourcesContent":["import {RegistrationAPI, userAPI} from \"../API/api\";\r\nimport Cookies from 'js-cookie';\r\n\r\nconst UPDATE_TEXT_LOGIN = 'UPDATE_TEXT_LOGIN';\r\nconst UPDATE_TEXT_PASSWORD = 'UPDATE_TEXT_PASSWORD';\r\n\r\nconst AUTH = 'AUTH';\r\n\r\nconst VALID_PASSWORD = 'VALID_PASSWORD';\r\nconst VALID_EMAIL = 'VALID_EMAIL';\r\nlet initialState = {\r\n    idUser: '',\r\n    email: '',\r\n    password: '122',\r\n    isAuth: false,\r\n    token: '',\r\n    validEmail: false,\r\n    colorEmail: '1px solid #c0e4f9',\r\n}\r\nconst AuthorezetionReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case UPDATE_TEXT_LOGIN:\r\n            return {\r\n                ...state,\r\n                email: action.emailBody\r\n            };\r\n        case UPDATE_TEXT_PASSWORD:\r\n            return {\r\n                ...state,\r\n                password: action.passwordBody\r\n            }\r\n        case VALID_EMAIL:\r\n            return {\r\n                ...state,\r\n                validEmail: action.emailValid,\r\n                colorEmail: action.emailColor\r\n            };\r\n        case VALID_PASSWORD:\r\n            return {\r\n                ...state,\r\n                validPassword: action.passwordValid,\r\n                colorPassword: action.passwordColor\r\n            };\r\n        case AUTH:\r\n            return {\r\n                ...state,\r\n                isAuth: action.authBody\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n};\r\nexport const updateEmail = (email) => ({type: UPDATE_TEXT_LOGIN, emailBody: email});\r\nexport const updatePassword = (password) => ({type: UPDATE_TEXT_PASSWORD, passwordBody: password});\r\nconst checkValidPassword = (password, color) => ({type: VALID_PASSWORD, passwordValid: password, passwordColor: color});\r\nconst checkValidEmail = (email, color) => ({type: VALID_EMAIL, emailValid: email, emailColor: color});\r\nexport const authIs = (auth) => ({type: AUTH, authBody: auth});\r\n\r\nexport const validEmail = (email) => {\r\n    return (dispatch) => {\r\n        if (!/.+@.+\\.[A-Za-z]+$/.test(email)) {\r\n            dispatch(checkValidEmail(false, '1px solid red'));\r\n        } else {\r\n            dispatch(checkValidEmail(true, '1px solid #c0e4f9'));\r\n        }\r\n    }\r\n};\r\n\r\nexport const validPassword = (password) => {\r\n    return (dispatch) => {\r\n        if (!/[a-zA-Z0-9]/.test(password) || password.length < 6) {\r\n            dispatch(checkValidPassword(false, '1px solid red'));\r\n        } else {\r\n            dispatch(checkValidPassword(true, '1px solid #c0e4f9'));\r\n        }\r\n    }\r\n};\r\n\r\nexport const auth = (email, password) => {\r\n    return (dispatch) => {\r\n        RegistrationAPI.putAthorization(email, password).then(response => {\r\n            if (response.data.success) {\r\n                Cookies.set('authToken', response.data.data.authToken, {expires: 365})\r\n                dispatch(authIs(true));\r\n                //browserHistory.push({pathname: '/pathname', state: {message: \"hello, im a passed message!\"}});\r\n            } else {\r\n                dispatch(authIs(false));\r\n                console.log('Cookies не добавлены')\r\n            }\r\n        });\r\n    }\r\n};\r\nexport default AuthorezetionReducer;"]},"metadata":{},"sourceType":"module"}