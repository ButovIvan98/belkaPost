{"ast":null,"code":"import _defineProperty from \"C:\\\\Users\\\\user\\\\OSPanel\\\\domains\\\\moscow\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { RegistrationAPI } from \"../API/api\";\nconst INPUT_TEXT_SURNAME = 'INPUT_TEXT_SURNAME'; //Фамилия\n\nconst INPUT_TEXT_NAME = 'INPUT_TEXT_NAME'; //Имя\n\nconst INPUT_TEXT_MIDDLE_NAME = 'INPUT_TEXT_MIDDLE_NAME'; //Отчество\n\nconst INPUT_TEXT_PHONE = 'INPUT_TEXT_PHONE'; //Телефон\n\nconst INPUT_TEXT_EMAIL = 'INPUT_TEXT_EMAIL'; //Емаил\n\nconst INPUT_TEXT_PASSWORD = 'INPUT_TEXT_PASSWORD'; //Пароль\n\nconst VALID_SURNAME = 'VALID_SURNAME';\nconst VALID_NAME = 'VALID_NAME';\nconst VALID_MIDDLE_NAME = 'VALID_MIDDLE_NAME';\nconst VALID_PHONE = 'VALID_PHONE';\nconst VALID_EMAIL = 'VALID_EMAIL';\nconst VALID_PASSWORD = 'VALID_PASSWORD';\nconst ADD_USER = 'ADD_USER';\nlet initialState = {\n  surname: '1',\n  validSurname: false,\n  name: '2',\n  validName: false,\n  middleName: '3',\n  validMiddleName: false,\n  phone: '',\n  validPhone: false,\n  email: '5',\n  validEmail: false,\n  password: '6',\n  validPassword: false,\n  colorSurname: '1px solid #c0e4f9',\n  colorName: '1px solid #c0e4f9',\n  colorMiddleName: '1px solid #c0e4f9',\n  colorPhone: '1x solid #c0e4f9',\n  colorEmail: '1px solid #c0e4f9',\n  colorPassword: '1px solid #c0e4f9'\n};\n\nconst RegistrationReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case INPUT_TEXT_SURNAME:\n      {\n        return _objectSpread({}, state, {\n          surname: action.bodySurname\n        });\n      }\n      ;\n\n    case INPUT_TEXT_NAME:\n      return _objectSpread({}, state, {\n        name: action.bodyName\n      });\n\n    case INPUT_TEXT_MIDDLE_NAME:\n      return _objectSpread({}, state, {\n        middleName: action.bodyMiddleName\n      });\n\n    case INPUT_TEXT_PHONE:\n      return _objectSpread({}, state, {\n        phone: action.bodyPhone\n      });\n\n    case INPUT_TEXT_EMAIL:\n      return _objectSpread({}, state, {\n        email: action.bodyEmail\n      });\n\n    case INPUT_TEXT_PASSWORD:\n      return _objectSpread({}, state, {\n        password: action.bodyPassword\n      });\n\n    case VALID_SURNAME:\n      return _objectSpread({}, state, {\n        validSurname: action.surnameBoolean\n      });\n\n    case VALID_NAME:\n      return _objectSpread({}, state, {\n        validName: action.nameBoolean\n      });\n\n    case VALID_MIDDLE_NAME:\n      return _objectSpread({}, state, {\n        validMiddleName: action.middleNameBoolean\n      });\n\n    case VALID_PHONE:\n      return _objectSpread({}, state, {\n        validPhone: action.phoneBoolean\n      });\n\n    case VALID_EMAIL:\n      return _objectSpread({}, state, {\n        validEmail: action.emailBoolean\n      });\n\n    case VALID_PASSWORD:\n      return _objectSpread({}, state, {\n        validPassword: action.passwordBoolean\n      });\n\n    default:\n      return _objectSpread({}, state);\n  }\n};\n\nexport const updateTextSurname = surname => ({\n  type: INPUT_TEXT_SURNAME,\n  bodySurname: surname\n});\nexport const updateTextName = name => ({\n  type: INPUT_TEXT_NAME,\n  bodyName: name\n});\nexport const updateTextMiddleName = middleName => ({\n  type: INPUT_TEXT_MIDDLE_NAME,\n  bodyMiddleName: middleName\n});\nexport const updateTextPhone = phone => ({\n  type: INPUT_TEXT_PHONE,\n  bodyPhone: phone\n});\nexport const updateTextEmail = email => ({\n  type: INPUT_TEXT_EMAIL,\n  bodyEmail: email\n});\nexport const updateTextPassword = password => ({\n  type: INPUT_TEXT_PASSWORD,\n  bodyPassword: password\n});\n\nconst checkValidSurname = (boolean, color) => ({\n  type: VALID_SURNAME,\n  surnameBoolean: boolean,\n  surnameColor: color\n});\n\nconst checkValidName = (boolean, color) => ({\n  type: VALID_NAME,\n  nameBoolean: boolean,\n  nameColor: color\n});\n\nconst checkValidMiddleName = (boolean, color) => ({\n  type: VALID_MIDDLE_NAME,\n  middleNameBoolean: boolean,\n  middleNameColor: color\n});\n\nconst checkValidPhone = (boolean, color) => ({\n  type: VALID_PHONE,\n  phoneBoolean: boolean,\n  phoneColor: color\n});\n\nconst checkValidEmail = (boolean, color) => ({\n  type: VALID_EMAIL,\n  emailBoolean: boolean,\n  emailColor: color\n});\n\nconst checkValidPassword = (boolean, color) => ({\n  type: VALID_PASSWORD,\n  passwordBoolean: boolean,\n  passwordColor: color\n});\n\nexport const addUser = (validSurname, validName, validMiddleName, validPhone, validEmail, validPassword, surname, name, middleName, phone, email, password) => {\n  return () => {\n    if (validEmail && validSurname && validName && validMiddleName && validPhone && validPassword) {\n      RegistrationAPI.putRegistration(surname, name, middleName, phone, email, password);\n    } else {\n      alert('Фамилия:' + surname + validSurname + 'имя' + name + validName);\n    }\n  };\n};\nexport const validSurname = surname => {\n  return dispatch => {\n    dispatch(updateTextSurname(surname));\n\n    if (surname.length < 2) {\n      dispatch(checkValidSurname(false)); //Сообщение об ошибке\n    } else {\n      dispatch(checkValidSurname(true));\n    }\n  };\n};\nexport const validName = name => {\n  return dispatch => {\n    if (name.length < 2) {\n      dispatch(checkValidName(false)); //Сообщение об ошибке\n    } else {\n      dispatch(checkValidName(true));\n    }\n  };\n};\nexport const validMiddleName = middleName => {\n  return dispatch => {\n    if (middleName.length < 2) {\n      dispatch(checkValidMiddleName(false)); //Сообщение об ошибке\n    } else {\n      dispatch(checkValidMiddleName(true));\n    }\n  };\n};\nexport const validPhone = phone => {\n  return dispatch => {\n    if (phone.length < 2) {\n      dispatch(checkValidPhone(false));\n    } else {\n      dispatch(checkValidPhone(true));\n    }\n  };\n};\nexport const validEmail = email => {\n  return dispatch => {\n    if (!/.+@.+\\.[A-Za-z]+$/.test(email)) {\n      dispatch(checkValidEmail(false));\n    } else {\n      dispatch(checkValidEmail(true));\n    }\n  };\n};\nexport const validPassword = password => {\n  return dispatch => {\n    if (password.length < 6) {//Придумать как будет возвращать сообщение об ошибке\n    } else if (!/[a-zA-Z0-9]/.test(password)) {\n      dispatch(checkValidPassword(false));\n    } else {\n      dispatch(checkValidPassword(true));\n    }\n  };\n};\nexport default RegistrationReducer;","map":{"version":3,"sources":["C:/Users/user/OSPanel/domains/moscow/src/redux/registrationReducer.js"],"names":["RegistrationAPI","INPUT_TEXT_SURNAME","INPUT_TEXT_NAME","INPUT_TEXT_MIDDLE_NAME","INPUT_TEXT_PHONE","INPUT_TEXT_EMAIL","INPUT_TEXT_PASSWORD","VALID_SURNAME","VALID_NAME","VALID_MIDDLE_NAME","VALID_PHONE","VALID_EMAIL","VALID_PASSWORD","ADD_USER","initialState","surname","validSurname","name","validName","middleName","validMiddleName","phone","validPhone","email","validEmail","password","validPassword","colorSurname","colorName","colorMiddleName","colorPhone","colorEmail","colorPassword","RegistrationReducer","state","action","type","bodySurname","bodyName","bodyMiddleName","bodyPhone","bodyEmail","bodyPassword","surnameBoolean","nameBoolean","middleNameBoolean","phoneBoolean","emailBoolean","passwordBoolean","updateTextSurname","updateTextName","updateTextMiddleName","updateTextPhone","updateTextEmail","updateTextPassword","checkValidSurname","boolean","color","surnameColor","checkValidName","nameColor","checkValidMiddleName","middleNameColor","checkValidPhone","phoneColor","checkValidEmail","emailColor","checkValidPassword","passwordColor","addUser","putRegistration","alert","dispatch","length","test"],"mappings":"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","sourcesContent":["import {RegistrationAPI} from \"../API/api\";\r\n\r\nconst INPUT_TEXT_SURNAME = 'INPUT_TEXT_SURNAME';//Фамилия\r\nconst INPUT_TEXT_NAME = 'INPUT_TEXT_NAME';//Имя\r\nconst INPUT_TEXT_MIDDLE_NAME = 'INPUT_TEXT_MIDDLE_NAME';//Отчество\r\nconst INPUT_TEXT_PHONE = 'INPUT_TEXT_PHONE';//Телефон\r\nconst INPUT_TEXT_EMAIL = 'INPUT_TEXT_EMAIL';//Емаил\r\nconst INPUT_TEXT_PASSWORD = 'INPUT_TEXT_PASSWORD';//Пароль\r\n\r\nconst VALID_SURNAME = 'VALID_SURNAME';\r\nconst VALID_NAME = 'VALID_NAME';\r\nconst VALID_MIDDLE_NAME = 'VALID_MIDDLE_NAME';\r\nconst VALID_PHONE = 'VALID_PHONE';\r\nconst VALID_EMAIL = 'VALID_EMAIL';\r\nconst VALID_PASSWORD = 'VALID_PASSWORD';\r\n\r\n\r\nconst ADD_USER = 'ADD_USER';\r\n let initialState = {\r\n    surname: '1',\r\n    validSurname: false,\r\n    name: '2',\r\n    validName: false,\r\n    middleName: '3',\r\n    validMiddleName: false,\r\n    phone: '',\r\n    validPhone: false,\r\n    email: '5',\r\n    validEmail: false,\r\n    password: '6',\r\n    validPassword: false,\r\n     colorSurname:'1px solid #c0e4f9',\r\n     colorName:'1px solid #c0e4f9',\r\n     colorMiddleName:'1px solid #c0e4f9',\r\n     colorPhone:'1x solid #c0e4f9',\r\n     colorEmail:'1px solid #c0e4f9',\r\n     colorPassword:'1px solid #c0e4f9',\r\n};\r\n\r\nconst RegistrationReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case INPUT_TEXT_SURNAME:{\r\n            return {\r\n                ...state,\r\n                surname: action.bodySurname\r\n            };\r\n        };\r\n        case INPUT_TEXT_NAME:\r\n            return {\r\n                ...state,\r\n                name: action.bodyName\r\n            };\r\n        case INPUT_TEXT_MIDDLE_NAME:\r\n\r\n            return {\r\n                ...state,\r\n                middleName: action.bodyMiddleName\r\n            };\r\n        case INPUT_TEXT_PHONE:\r\n            return {\r\n                ...state,\r\n                phone: action.bodyPhone\r\n            };\r\n        case INPUT_TEXT_EMAIL:\r\n            return {\r\n                ...state,\r\n                email: action.bodyEmail\r\n            };\r\n        case INPUT_TEXT_PASSWORD:\r\n            return {\r\n                ...state,\r\n                password: action.bodyPassword\r\n            };\r\n        case VALID_SURNAME:\r\n            return {\r\n                ...state,\r\n                validSurname: action.surnameBoolean\r\n            };\r\n        case VALID_NAME:\r\n            return {\r\n                ...state,\r\n                validName: action.nameBoolean\r\n            };\r\n        case VALID_MIDDLE_NAME:\r\n            return {\r\n                ...state,\r\n                validMiddleName: action.middleNameBoolean\r\n            };\r\n        case VALID_PHONE:\r\n            return {\r\n                ...state,\r\n                validPhone: action.phoneBoolean\r\n            };\r\n        case VALID_EMAIL:\r\n            return {\r\n                ...state,\r\n                validEmail: action.emailBoolean\r\n            };\r\n        case VALID_PASSWORD:\r\n            return {\r\n                ...state,\r\n                validPassword: action.passwordBoolean\r\n            };\r\n        default:\r\n            return {...state}\r\n    }\r\n};\r\nexport const updateTextSurname = (surname) => ({type: INPUT_TEXT_SURNAME, bodySurname: surname});\r\nexport const updateTextName = (name) => ({type: INPUT_TEXT_NAME, bodyName: name});\r\nexport const updateTextMiddleName = (middleName) => ({type: INPUT_TEXT_MIDDLE_NAME, bodyMiddleName: middleName});\r\nexport const updateTextPhone = (phone) => ({type: INPUT_TEXT_PHONE, bodyPhone: phone});\r\nexport const updateTextEmail = (email) => ({type: INPUT_TEXT_EMAIL, bodyEmail: email});\r\nexport const updateTextPassword = (password) => ({type: INPUT_TEXT_PASSWORD, bodyPassword: password});\r\n\r\nconst checkValidSurname = (boolean,color) => ({type: VALID_SURNAME, surnameBoolean: boolean,surnameColor:color});\r\nconst checkValidName = (boolean,color) => ({type: VALID_NAME, nameBoolean: boolean,nameColor:color});\r\nconst checkValidMiddleName = (boolean,color) => ({type: VALID_MIDDLE_NAME, middleNameBoolean: boolean, middleNameColor:color});\r\nconst checkValidPhone = (boolean,color) => ({type: VALID_PHONE, phoneBoolean: boolean, phoneColor:color});\r\nconst checkValidEmail = (boolean,color) => ({type: VALID_EMAIL, emailBoolean: boolean, emailColor:color});\r\nconst checkValidPassword = (boolean,color) => ({type: VALID_PASSWORD, passwordBoolean: boolean, passwordColor:color});\r\n\r\nexport const addUser =(validSurname,validName,validMiddleName,validPhone,validEmail,validPassword,surname,name,middleName,phone,email,password)=>{\r\n    return()=>{\r\n        if (validEmail && validSurname && validName && validMiddleName && validPhone && validPassword) {\r\n            RegistrationAPI.putRegistration(surname, name, middleName, phone, email, password)\r\n        }\r\n        else\r\n        {\r\n            alert('Фамилия:' + surname+validSurname + 'имя' + name + validName)\r\n        }\r\n    }\r\n};\r\n\r\nexport const validSurname = (surname) => {\r\n    return (dispatch) => {\r\n        dispatch(updateTextSurname(surname));\r\n        if (surname.length < 2) {\r\n            dispatch(checkValidSurname(false));\r\n            //Сообщение об ошибке\r\n        } else {\r\n            dispatch(checkValidSurname(true));\r\n        }\r\n    }\r\n};\r\nexport const validName = (name) => {\r\n    return (dispatch) => {\r\n        if (name.length < 2) {\r\n            dispatch(checkValidName(false));\r\n            //Сообщение об ошибке\r\n        } else {\r\n            dispatch(checkValidName(true));\r\n        }\r\n    }\r\n};\r\nexport const validMiddleName = (middleName) => {\r\n    return (dispatch) => {\r\n        if (middleName.length < 2) {\r\n            dispatch(checkValidMiddleName(false));\r\n            //Сообщение об ошибке\r\n        } else {\r\n            dispatch(checkValidMiddleName(true));\r\n        }\r\n    }\r\n};\r\nexport const validPhone = (phone) => {\r\n    return (dispatch) => {\r\n        if (phone.length < 2) {\r\n            dispatch(checkValidPhone(false));\r\n        } else {\r\n            dispatch(checkValidPhone(true));\r\n        }\r\n    }\r\n};\r\nexport const validEmail = (email) => {\r\n    return (dispatch) => {\r\n        if (!/.+@.+\\.[A-Za-z]+$/.test(email)) {\r\n            dispatch(checkValidEmail(false));\r\n        } else {\r\n            dispatch(checkValidEmail(true));\r\n        }\r\n    }\r\n};\r\nexport const validPassword = (password) => {\r\n    return (dispatch) => {\r\n        if (password.length < 6) {\r\n            //Придумать как будет возвращать сообщение об ошибке\r\n        }\r\n        else if (!/[a-zA-Z0-9]/.test(password)) {\r\n            dispatch(checkValidPassword(false));\r\n        } else {\r\n            dispatch(checkValidPassword(true));\r\n        }\r\n    }\r\n};\r\nexport default RegistrationReducer;\r\n\r\n"]},"metadata":{},"sourceType":"module"}